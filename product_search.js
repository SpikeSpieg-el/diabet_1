// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Google Translate API
async function translateText(text, targetLang = 'ru', sourceLang = 'en') {
    try {
        const response = await fetch(`https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}`);
        const data = await response.json();
        return data[0][0][0];
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:', error);
        return text; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ API Open Food Facts –∏–ª–∏ FoodData Central
async function searchProducts(query) {
    console.log('üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', query);
    
    const selectedDatabase = document.querySelector('input[name="databaseSelect"]:checked').value;
    const autoTranslate = document.getElementById('autoTranslateCheckbox').checked;
    console.log('üìö –í—ã–±—Ä–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', selectedDatabase);
    console.log('üåê –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥:', autoTranslate ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω');

    try {
        let data;
        if (selectedDatabase === 'openfoodfacts') {
            const response = await fetch(`https://world.openfoodfacts.org/cgi/search.pl?search_terms=${encodeURIComponent(query)}&search_simple=1&action=process&json=1&page_size=20`);
            data = await response.json();
            
            if (!data.products || data.products.length === 0) {
                console.log('‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Open Food Facts');
                return [];
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return data.products.map(product => ({
                id: product.code || Math.random().toString(36).substr(2, 9),
                name: product.product_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                carbs: parseFloat(product.nutriments?.carbohydrates_100g) || 0,
                brand: product.brands || '–ù–µ —É–∫–∞–∑–∞–Ω',
                image: product.image_url || null
            }));
        } else if (selectedDatabase === 'fooddatacentral') {
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥
            const searchQuery = autoTranslate ? await translateText(query, 'en', 'ru') : query;
            console.log('üåê –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:', searchQuery);

            const apiKey = localStorage.getItem('foodDataCentralApiKey') || 'DEMO_KEY';
            const response = await fetch(`https://api.nal.usda.gov/fdc/v1/foods/search?api_key=${apiKey}&query=${encodeURIComponent(searchQuery)}`);
            data = await response.json();
            
            if (!data.foods || data.foods.length === 0) {
                console.log('‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ FoodData Central');
                return [];
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥
            const products = await Promise.all(data.foods.map(async food => {
                const carbs = food.foodNutrients?.find(n => n.nutrientName === 'Carbohydrate, by difference')?.value || 0;
                
                let name = food.description || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                let brand = food.brandOwner || '–ù–µ —É–∫–∞–∑–∞–Ω';
                
                if (autoTranslate) {
                    name = await translateText(name);
                    brand = await translateText(brand);
                }
                
                return {
                    id: food.fdcId.toString(),
                    name: name,
                    carbs: parseFloat(carbs) || 0,
                    brand: brand,
                    image: null // FoodData Central –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                };
            }));

            return products;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
        showAlertPopup('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', 'error');
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
function displaySearchResults(results) {
    console.log('üéØ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:', results);
    
    const resultsContainer = document.getElementById('productSearchResults');
    resultsContainer.innerHTML = '';

    if (results.length === 0) {
        console.log('‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        resultsContainer.innerHTML = `
            <div class="text-center text-gray-500 dark:text-gray-400 py-4">
                –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </div>
        `;
        return;
    }

    console.log('üìã –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ', results.length, '–ø—Ä–æ–¥—É–∫—Ç–æ–≤');
    
    results.forEach((product, index) => {
        console.log(`üì¶ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ${index + 1}:`, product);
        
        const productElement = document.createElement('div');
        productElement.className = 'bg-gray-50 dark:bg-slate-700 rounded-lg p-4 flex justify-between items-center';
        
        const imageHtml = product.image ? 
            `<img src="${product.image}" alt="${product.name}" class="w-16 h-16 object-contain rounded-lg mr-4">` : 
            `<div class="w-16 h-16 bg-gray-200 dark:bg-slate-600 rounded-lg mr-4 flex items-center justify-center">
                <i data-lucide="package" class="w-8 h-8 text-gray-400"></i>
            </div>`;

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–≥–ª–µ–≤–æ–¥–æ–≤
        const carbsValue = typeof product.carbs === 'number' ? product.carbs.toFixed(1) : '0.0';

        productElement.innerHTML = `
            <div class="flex items-center flex-1">
                ${imageHtml}
                <div>
                    <h3 class="font-medium text-gray-800 dark:text-gray-100">${product.name}</h3>
                    <p class="text-sm text-gray-500 dark:text-gray-400">
                        –ë—Ä–µ–Ω–¥: ${product.brand}
                    </p>
                    <p class="text-sm text-gray-500 dark:text-gray-400">
                        –£–≥–ª–µ–≤–æ–¥—ã: ${carbsValue}–≥ –Ω–∞ 100–≥
                    </p>
                </div>
            </div>
            <button class="add-product-btn bg-green-500 text-white px-3 py-1.5 rounded-lg hover:bg-green-600 dark:bg-green-600 dark:hover:bg-green-700 transition-colors text-sm ml-4"
                    data-product-id="${product.id}">
                –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É
            </button>
        `;
        resultsContainer.appendChild(productElement);
    });

    console.log('‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–î–æ–±–∞–≤–∏—Ç—å"
    document.querySelectorAll('.add-product-btn').forEach(button => {
        button.addEventListener('click', (e) => {
            const productId = e.target.dataset.productId;
            console.log('üñ±Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID:', productId);
            
            const product = results.find(p => p.id === productId);
            if (product) {
                console.log('üì¶ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', product);
                addProductToLocalDatabase(product);
            } else {
                console.error('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID:', productId);
            }
        });
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
    lucide.createIcons();
    console.log('‚ú® –ò–∫–æ–Ω–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
function addProductToLocalDatabase(product) {
    console.log('üìù –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑—É:', product);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const products = JSON.parse(localStorage.getItem('diabetesAppProducts') || '[]');
    console.log('üìö –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ:', products.length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    const existingProduct = products.find(p => p.name.toLowerCase() === product.name.toLowerCase());
    
    if (existingProduct) {
        console.log('‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ:', existingProduct);
        showAlertPopup('–≠—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ', 'warning');
        return existingProduct;
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    const modal = document.getElementById('addProductModal');
    const modalTitle = document.getElementById('addProductModalTitle');
    const productNameInput = document.getElementById('newProductName');
    const productCarbsInput = document.getElementById('newProductCarbs');
    const productInsulinRatioInput = document.getElementById('newProductInsulinRatio');
    const productBarcodeInput = document.getElementById('productBarcode');
    const addProductForm = document.getElementById('addProductForm');

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–µ
    modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –ø–æ–∏—Å–∫–∞';
    productNameInput.value = product.name;
    productCarbsInput.value = product.carbs;
    productInsulinRatioInput.value = '1.0'; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    productBarcodeInput.value = product.id;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.style.display = 'flex';

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const handleSubmit = (e) => {
        e.preventDefault();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
        const newProduct = {
            id: Date.now(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            name: productNameInput.value,
            carbs: parseFloat(productCarbsInput.value),
            insulinRatio: parseFloat(productInsulinRatioInput.value),
            brand: product.brand,
            image: product.image,
            dateAdded: new Date().toISOString()
        };

        console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç:', newProduct);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –º–∞—Å—Å–∏–≤
        products.push(newProduct);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ localStorage
        localStorage.setItem('diabetesAppProducts', JSON.stringify(products));
        
        console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É');
        console.log('üìö –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ:', products.length);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.style.display = 'none';
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        addProductForm.reset();
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        addProductForm.removeEventListener('submit', handleSubmit);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        if (typeof renderProductsView === 'function') {
            renderProductsView();
        }
        
        showAlertPopup('–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', 'success');
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    addProductForm.addEventListener('submit', handleSubmit);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    const cancelButton = document.getElementById('cancelAddProductBtn');
    const handleCancel = () => {
        modal.style.display = 'none';
        addProductForm.reset();
        addProductForm.removeEventListener('submit', handleSubmit);
        cancelButton.removeEventListener('click', handleCancel);
    };
    cancelButton.addEventListener('click', handleCancel);

    return null;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('productSearchInput');
    const searchButton = document.getElementById('productSearchBtn');
    let searchTimeout;
    let isSearching = false;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    const performSearch = async () => {
        if (isSearching) return;
        
        const query = searchInput.value.trim();
        if (query) {
            isSearching = true;
            searchButton.disabled = true;
            searchButton.innerHTML = '<i data-lucide="loader-2" class="w-5 h-5 animate-spin"></i>';
            lucide.createIcons();
            
            try {
                const results = await searchProducts(query);
                displaySearchResults(results);
            } finally {
                isSearching = false;
                searchButton.disabled = false;
                searchButton.innerHTML = '<i data-lucide="search" class="w-5 h-5"></i>';
                lucide.createIcons();
            }
        }
    };

    // –ü–æ–∏—Å–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    searchButton.addEventListener('click', performSearch);

    // –ü–æ–∏—Å–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    searchInput.addEventListener('input', () => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(performSearch, 500);
    });

    // –ü–æ–∏—Å–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
    searchInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            performSearch();
        }
    });
}); 